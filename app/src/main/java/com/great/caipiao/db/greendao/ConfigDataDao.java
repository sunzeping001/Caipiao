package com.great.caipiao.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.great.caipiao.db.entity.ConfigData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG_DATA".
*/
public class ConfigDataDao extends AbstractDao<ConfigData, Long> {

    public static final String TABLENAME = "CONFIG_DATA";

    /**
     * Properties of entity ConfigData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Baiwei = new Property(1, String.class, "baiwei", false, "BAIWEI");
        public final static Property Shiwei = new Property(2, String.class, "shiwei", false, "SHIWEI");
        public final static Property Gewei = new Property(3, String.class, "gewei", false, "GEWEI");
        public final static Property Jigou = new Property(4, String.class, "jigou", false, "JIGOU");
        public final static Property Zhihe = new Property(5, String.class, "zhihe", false, "ZHIHE");
        public final static Property Daxiao = new Property(6, String.class, "daxiao", false, "DAXIAO");
        public final static Property _021 = new Property(7, String.class, "_021", false, "_021");
        public final static Property Total = new Property(8, int.class, "total", false, "TOTAL");
        public final static Property Hezhi = new Property(9, int.class, "hezhi", false, "HEZHI");
        public final static Property Kuadu = new Property(10, String.class, "kuadu", false, "KUADU");
    }


    public ConfigDataDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BAIWEI\" TEXT," + // 1: baiwei
                "\"SHIWEI\" TEXT," + // 2: shiwei
                "\"GEWEI\" TEXT," + // 3: gewei
                "\"JIGOU\" TEXT," + // 4: jigou
                "\"ZHIHE\" TEXT," + // 5: zhihe
                "\"DAXIAO\" TEXT," + // 6: daxiao
                "\"_021\" TEXT," + // 7: _021
                "\"TOTAL\" INTEGER NOT NULL ," + // 8: total
                "\"HEZHI\" INTEGER NOT NULL ," + // 9: hezhi
                "\"KUADU\" TEXT);"); // 10: kuadu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConfigData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String baiwei = entity.getBaiwei();
        if (baiwei != null) {
            stmt.bindString(2, baiwei);
        }
 
        String shiwei = entity.getShiwei();
        if (shiwei != null) {
            stmt.bindString(3, shiwei);
        }
 
        String gewei = entity.getGewei();
        if (gewei != null) {
            stmt.bindString(4, gewei);
        }
 
        String jigou = entity.getJigou();
        if (jigou != null) {
            stmt.bindString(5, jigou);
        }
 
        String zhihe = entity.getZhihe();
        if (zhihe != null) {
            stmt.bindString(6, zhihe);
        }
 
        String daxiao = entity.getDaxiao();
        if (daxiao != null) {
            stmt.bindString(7, daxiao);
        }
 
        String _021 = entity.get_021();
        if (_021 != null) {
            stmt.bindString(8, _021);
        }
        stmt.bindLong(9, entity.getTotal());
        stmt.bindLong(10, entity.getHezhi());
 
        String kuadu = entity.getKuadu();
        if (kuadu != null) {
            stmt.bindString(11, kuadu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConfigData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String baiwei = entity.getBaiwei();
        if (baiwei != null) {
            stmt.bindString(2, baiwei);
        }
 
        String shiwei = entity.getShiwei();
        if (shiwei != null) {
            stmt.bindString(3, shiwei);
        }
 
        String gewei = entity.getGewei();
        if (gewei != null) {
            stmt.bindString(4, gewei);
        }
 
        String jigou = entity.getJigou();
        if (jigou != null) {
            stmt.bindString(5, jigou);
        }
 
        String zhihe = entity.getZhihe();
        if (zhihe != null) {
            stmt.bindString(6, zhihe);
        }
 
        String daxiao = entity.getDaxiao();
        if (daxiao != null) {
            stmt.bindString(7, daxiao);
        }
 
        String _021 = entity.get_021();
        if (_021 != null) {
            stmt.bindString(8, _021);
        }
        stmt.bindLong(9, entity.getTotal());
        stmt.bindLong(10, entity.getHezhi());
 
        String kuadu = entity.getKuadu();
        if (kuadu != null) {
            stmt.bindString(11, kuadu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConfigData readEntity(Cursor cursor, int offset) {
        ConfigData entity = new ConfigData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // baiwei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shiwei
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gewei
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jigou
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zhihe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // daxiao
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // _021
            cursor.getInt(offset + 8), // total
            cursor.getInt(offset + 9), // hezhi
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // kuadu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConfigData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaiwei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShiwei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGewei(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJigou(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZhihe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDaxiao(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.set_021(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTotal(cursor.getInt(offset + 8));
        entity.setHezhi(cursor.getInt(offset + 9));
        entity.setKuadu(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConfigData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConfigData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConfigData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
